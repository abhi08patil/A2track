<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security.xsd">

	<security:http pattern="/images/**" security="none" />
	<security:http pattern="/css/**" security="none" />
	<security:http pattern="/styles/**" security="none" />
	<security:http pattern="/scripts/**" security="none" />
	<security:http pattern="/js/**" security="none" />
	<security:http pattern="/sessionTimeout.html" security="none"></security:http>
	<security:http pattern="/loggedOut.html" security="none"></security:http>
	<security:http pattern="/initSignup.html" security="none"></security:http>
	<security:http pattern="/isUsernameAlreadyExists.html"
		security="none"></security:http>
	<security:http pattern="/isEmailIdAlreadyExists.html"
		security="none"></security:http>
	<security:http pattern="/signUpForm.html" security="none"></security:http>
	<security:http pattern="/signup.html" security="none"></security:http>

	<!-- This is where we configure Spring-Security -->
	<security:http auto-config="false" use-expressions="true"
		access-denied-page="/denied.html" entry-point-ref="authenticationEntryPoint">

		<security:logout invalidate-session="true"
			delete-cookies="JSESSIONID" logout-success-url="/loggedOut.html"
			logout-url="/logout.html" />

		<security:session-management
			invalid-session-url="/sessionTimeout.html" />

		<security:intercept-url pattern="/login.html"
			access="permitAll" />
		<security:intercept-url pattern="/welcome.html"
			access="hasAnyRole('ROLE_ADMIN' , 'ROLE_USER')" />
		<security:intercept-url pattern="/deleteTicket.html"
			access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/manageTicket.html"
			access="hasAnyRole('ROLE_ADMIN' , 'ROLE_USER')" />
		<security:intercept-url pattern="/downloadReport.html"
			access="hasAnyRole('ROLE_ADMIN' , 'ROLE_USER')" />
		<security:intercept-url pattern="/viewSummaryGrid.html"
			access="hasAnyRole('ROLE_ADMIN' , 'ROLE_USER')" />
		<security:intercept-url pattern="/viewProfileDetails.html"
			access="hasAnyRole('ROLE_ADMIN' , 'ROLE_USER')" />
		<security:intercept-url pattern="/updateProfile.html"
			access="hasAnyRole('ROLE_ADMIN' , 'ROLE_USER')" />
		<security:custom-filter ref="blacklistFilter"
			before="FILTER_SECURITY_INTERCEPTOR" />
		<security:custom-filter ref="authenticationFilter"
			position="FORM_LOGIN_FILTER" />

		<!-- <security:custom-filter ref="captchaCaptureFilter" before="FORM_LOGIN_FILTER" 
			/> <security:custom-filter ref="captchaVerifierFilter" after="FORM_LOGIN_FILTER" 
			/> -->
	</security:http>

	<!-- For capturing CAPTCHA fields -->
	<!--<bean id="captchaCaptureFilter" class="com.filter.CaptchaCaptureFilter" 
		/> -->

	<!-- For verifying CAPTCHA fields -->
	<!-- Private key is assigned by the reCATPCHA service -->
	<!-- <bean id="captchaVerifierFilter" class="com.filter.CaptchaVerifierFilter" 
		p:useProxy="false" p:proxyPort="8085" p:proxyHost="localhost" p:failureUrl="/login.html?error=true" 
		p:captchaCaptureFilter-ref="captchaCaptureFilter" p:privateKey="6LeTIPwSAAAAAFeTwqtGhejeeAdZC67bdcE0q2Ya" 
		/> -->

	<!-- Custom filter to deny unwanted users even though registered -->
	<bean id="blacklistFilter" class="com.filter.BlacklistFilter" />

	<!-- Custom filter for username and password. The real customization is 
		done in the customAthenticationManager -->
	<bean id="authenticationFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"
		p:authenticationManager-ref="customAuthenticationManager"
		p:authenticationFailureHandler-ref="customAuthenticationFailureHandler"
		p:authenticationSuccessHandler-ref="customAuthenticationSuccessHandler" />

	<!-- Custom authentication manager. In order to authenticate, username and 
		password must not be the same -->
	<bean id="customAuthenticationManager" class="com.service.impl.CustomAuthenticationManager" />

	<!-- We just actually need to set the default failure url here -->
	<bean id="customAuthenticationFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
		p:defaultFailureUrl="/login.html?error=true" />

	<!-- We just actually need to set the default target url here -->
	<bean id="customAuthenticationSuccessHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler"
		p:defaultTargetUrl="/welcome.html" />

	<!-- The AuthenticationEntryPoint is responsible for redirecting the user 
		to a particular page, like a login page, whenever the server sends back a 
		response requiring authentication -->
	<!-- See Spring-Security Reference 5.4.1 for more info -->
	<bean id="authenticationEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"
		p:loginFormUrl="/login.html" />

	<!-- The tag below has no use but Spring Security needs it to autowire the 
		parent property of org.springframework.security.authentication.ProviderManager. 
		Otherwise we get an error A probable bug. This is still under investigation -->
	<security:authentication-manager />
</beans>
